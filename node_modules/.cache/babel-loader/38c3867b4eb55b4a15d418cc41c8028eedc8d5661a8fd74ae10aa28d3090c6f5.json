{"ast":null,"code":"// API service for interacting with the tasklist backend on port 5174\nconst TASKLIST_BASE_URL = 'http://localhost:5174';\nclass TasklistApiService {\n  /**\r\n   * Search for tasks using the tasklist backend\r\n   * @param {Object} filter - Task search filter\r\n   * @returns {Promise<Array>} Array of tasks\r\n   */\n  async searchTasks(filter = {}) {\n    try {\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(filter)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error searching tasks:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get a specific task by ID\r\n   * @param {string} taskId - Task ID\r\n   * @returns {Promise<Object>} Task details\r\n   */\n  async getTaskById(taskId) {\n    try {\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/${taskId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error fetching task:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Assign a task to a user\r\n   * @param {string} taskId - Task ID\r\n   * @param {string} assignee - User to assign the task to\r\n   * @param {boolean} allowOverrideAssignment - Whether to allow overriding existing assignment\r\n   * @returns {Promise<Object>} Updated task\r\n   */\n  async assignTask(taskId, assignee, allowOverrideAssignment = true) {\n    try {\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/${taskId}/assign`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          assignee,\n          allowOverrideAssignment\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error assigning task:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Unassign a task\r\n   * @param {string} taskId - Task ID\r\n   * @returns {Promise<Object>} Updated task\r\n   */\n  async unassignTask(taskId) {\n    try {\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/${taskId}/unassign`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error unassigning task:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Complete a task with optional variables\r\n   * @param {string} taskId - Task ID\r\n   * @param {Array} variables - Variables to pass when completing the task\r\n   * @returns {Promise<Object>} Completed task\r\n   */\n  async completeTask(taskId, variables = []) {\n    try {\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/${taskId}/complete`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          variables\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error completing task:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Search task variables\r\n   * @param {string} taskId - Task ID\r\n   * @param {Object} searchRequest - Search variables request\r\n   * @returns {Promise<Object>} Task variables\r\n   */\n  async searchTaskVariables(taskId, searchRequest = {}) {\n    try {\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/${taskId}/variables/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(searchRequest)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error searching task variables:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get open tasks (tasks that are not completed)\r\n   * @returns {Promise<Array>} Array of open tasks\r\n   */\n  async getOpenTasks() {\n    const filter = {\n      state: 'CREATED',\n      // Only get created/active tasks\n      pageSize: 100 // Adjust as needed\n    };\n    return this.searchTasks(filter);\n  }\n\n  /**\r\n   * Get unassigned tasks\r\n   * @returns {Promise<Array>} Array of unassigned tasks\r\n   */\n  async getUnassignedTasks() {\n    const filter = {\n      state: 'CREATED',\n      assigned: false,\n      pageSize: 100\n    };\n    return this.searchTasks(filter);\n  }\n\n  /**\r\n   * Get tasks assigned to a specific user\r\n   * @param {string} assignee - User to get tasks for\r\n   * @returns {Promise<Array>} Array of assigned tasks\r\n   */\n  async getTasksAssignedTo(assignee) {\n    const filter = {\n      state: 'CREATED',\n      assignee: assignee,\n      pageSize: 100\n    };\n    return this.searchTasks(filter);\n  }\n}\n\n// Export a singleton instance\nexport default new TasklistApiService();","map":{"version":3,"names":["TASKLIST_BASE_URL","TasklistApiService","searchTasks","filter","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","getTaskById","taskId","assignTask","assignee","allowOverrideAssignment","unassignTask","completeTask","variables","searchTaskVariables","searchRequest","getOpenTasks","state","pageSize","getUnassignedTasks","assigned","getTasksAssignedTo"],"sources":["C:/Users/sahilkushwaha/Downloads/customer/customer-onboarding-ui/src/services/tasklistApi.js"],"sourcesContent":["// API service for interacting with the tasklist backend on port 5174\r\nconst TASKLIST_BASE_URL = 'http://localhost:5174';\r\n\r\nclass TasklistApiService {\r\n  \r\n  /**\r\n   * Search for tasks using the tasklist backend\r\n   * @param {Object} filter - Task search filter\r\n   * @returns {Promise<Array>} Array of tasks\r\n   */\r\n  async searchTasks(filter = {}) {\r\n    try {\r\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(filter)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error searching tasks:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a specific task by ID\r\n   * @param {string} taskId - Task ID\r\n   * @returns {Promise<Object>} Task details\r\n   */\r\n  async getTaskById(taskId) {\r\n    try {\r\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/${taskId}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign a task to a user\r\n   * @param {string} taskId - Task ID\r\n   * @param {string} assignee - User to assign the task to\r\n   * @param {boolean} allowOverrideAssignment - Whether to allow overriding existing assignment\r\n   * @returns {Promise<Object>} Updated task\r\n   */\r\n  async assignTask(taskId, assignee, allowOverrideAssignment = true) {\r\n    try {\r\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/${taskId}/assign`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          assignee,\r\n          allowOverrideAssignment\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error assigning task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unassign a task\r\n   * @param {string} taskId - Task ID\r\n   * @returns {Promise<Object>} Updated task\r\n   */\r\n  async unassignTask(taskId) {\r\n    try {\r\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/${taskId}/unassign`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error unassigning task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Complete a task with optional variables\r\n   * @param {string} taskId - Task ID\r\n   * @param {Array} variables - Variables to pass when completing the task\r\n   * @returns {Promise<Object>} Completed task\r\n   */\r\n  async completeTask(taskId, variables = []) {\r\n    try {\r\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/${taskId}/complete`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          variables\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error completing task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search task variables\r\n   * @param {string} taskId - Task ID\r\n   * @param {Object} searchRequest - Search variables request\r\n   * @returns {Promise<Object>} Task variables\r\n   */\r\n  async searchTaskVariables(taskId, searchRequest = {}) {\r\n    try {\r\n      const response = await fetch(`${TASKLIST_BASE_URL}/tasklist/tasks/${taskId}/variables/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(searchRequest)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error searching task variables:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get open tasks (tasks that are not completed)\r\n   * @returns {Promise<Array>} Array of open tasks\r\n   */\r\n  async getOpenTasks() {\r\n    const filter = {\r\n      state: 'CREATED', // Only get created/active tasks\r\n      pageSize: 100 // Adjust as needed\r\n    };\r\n    \r\n    return this.searchTasks(filter);\r\n  }\r\n\r\n  /**\r\n   * Get unassigned tasks\r\n   * @returns {Promise<Array>} Array of unassigned tasks\r\n   */\r\n  async getUnassignedTasks() {\r\n    const filter = {\r\n      state: 'CREATED',\r\n      assigned: false,\r\n      pageSize: 100\r\n    };\r\n    \r\n    return this.searchTasks(filter);\r\n  }\r\n\r\n  /**\r\n   * Get tasks assigned to a specific user\r\n   * @param {string} assignee - User to get tasks for\r\n   * @returns {Promise<Array>} Array of assigned tasks\r\n   */\r\n  async getTasksAssignedTo(assignee) {\r\n    const filter = {\r\n      state: 'CREATED',\r\n      assignee: assignee,\r\n      pageSize: 100\r\n    };\r\n    \r\n    return this.searchTasks(filter);\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport default new TasklistApiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}